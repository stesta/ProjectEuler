#!fsharp

#r "nuget: MathNet.Numerics"
#r "nuget: MathNet.Numerics.FSharp, *-*"

#load "src/Math/Primality.fs"
#load "src/Math/Series.fs"

open MathNet.Numerics

#!markdown

Problem 1 - Multiples of 3 and 5
---------

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

#!fsharp

[1 .. 1000]
|> List.filter (fun x -> x % 3 = 0 || x % 5 = 0)
|> List.sum

#!markdown

Problem 2 - Fibonacci numbers
---------

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#!fsharp

// MathNet.Numerics also has a built-in function:
// Generate.Fibonacci 40
Series.fibonacci 
|> Seq.takeWhile (fun x -> x <= 4000000) 
|> Seq.filter (fun x -> x % 2 = 0)
|> Seq.sum

#!markdown

Problem 3 - Largest prime factor
---------

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

#!fsharp

Primality.factors 600851475143L |> List.max

#!markdown

Problem 4 - Largest palindrome product
---------

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.

#!fsharp

let isPalindrome n =
    let s = n.ToString()
    s = String(s.ToCharArray() |> Array.rev)

[ for j in 100 .. 999 do 
    for k in 100 .. 999 -> 
        j * k ]
|> Seq.filter (fun x -> isPalindrome x)
|> Seq.max

#!markdown

Problem 5 - Smallest multiple
---------

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

#!fsharp

[|1L .. 20L|] |> Euclid.LeastCommonMultiple 

#!markdown

Problem 6 - Sum square difference
---------

The sum of the squares of the first ten natural numbers is,  
1^2 + 2^2 + ... + 10^2 = 385  

The square of the sum of the first ten natural numbers is,  
(1 + 2 + ... + 10)^2 = 55^2 = 3025  

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.  
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.  

#!fsharp

let flip f x y = f y x 

// playing with a little more Haskelly style of function composition and point-free notation
let sumOfSquares = List.sum << List.map (flip pown 2)
let squareOfSum = (flip pown 2) << List.sum

squareOfSum [1..100] - sumOfSquares [1..100]

#!markdown

Problem 7 - 10001st prime
---------

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?

#!fsharp

Primality.primes |> Seq.item 10000 // zero-based index
